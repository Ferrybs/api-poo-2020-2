Index: src/main/kotlin/br/com/empresa/financeiro/Financeiro.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package br.com.empresa.financeiro\r\n\r\nimport br.com.empresa.financeiro.cartao.Cartao\r\nimport br.com.empresa.financeiro.cartao.CartaoTransacao\r\nimport br.com.empresa.financeiro.pessoa.Pessoa\r\nimport br.com.empresa.financeiro.conta.Conta\r\nimport br.com.empresa.financeiro.transacao.Transacao\r\nimport com.google.gson.annotations.Expose\r\n\r\n\r\nclass Financeiro {\r\n    @Expose\r\n    private var contas = mutableListOf<Conta>()\r\n\r\n    /*\r\n    *   CREATE\r\n    * */\r\n    fun cConta(conta: Conta?): String {\r\n        /*\r\n        Verifica que a conta passada por parametro nao esta nula\r\n        e verifica se a conta tem todos o atributos preenchidos\r\n        retorna SUCESSO se for criada e FRACASSO caso contrario\r\n         */\r\n        if (conta != null && conta.verificaConta()) {\r\n            contas.add(conta)\r\n            return \"SUCESSO\"\r\n        }\r\n        return \"FRACASSO\"\r\n    }\r\n\r\n    fun cTransacao(cartaoTransacao: CartaoTransacao?): String{\r\n        if (verificaFinanceiro()){\r\n\r\n            val cartao = cartaoTransacao?.cartao\r\n            val transacao = cartaoTransacao?.transacao\r\n\r\n            if(cartao?.verificaCartao() != null && transacao != null && transacao.verificaTransacao()) {\r\n\r\n                val conta = rConta(cartao)\r\n\r\n                if(conta?.verificaConta() != null) {\r\n                    conta.rContaCartao()?.cTransacao(transacao)\r\n                    return \"SUCESSO\"\r\n            }\r\n            }\r\n        }\r\n            return \"FRACASSO\"\r\n    }\r\n    /*\r\n    *   READ\r\n    * */\r\n    fun rConta(): MutableList<Conta>? {\r\n        if (verificaFinanceiro()) return contas\r\n        return null\r\n    }\r\n    fun rConta(pessoa: Pessoa?): Conta? {\r\n        if(verificaFinanceiro()) {\r\n            if (pessoa != null) {\r\n                val documento = pessoa.documentoPessoa\r\n                val nome = pessoa.nomePessoa\r\n                if (documento != null){\r\n                    return contas.find { Conta -> Conta.rContaPessoa()?.documentoPessoa == documento }\r\n                }\r\n                if (nome != null){\r\n                    return contas.find { Conta -> Conta.rContaPessoa()?.nomePessoa == nome }\r\n\r\n                }\r\n\r\n            }\r\n        }\r\n        return null\r\n    }\r\n    fun rConta(cartao: Cartao?): Conta? {\r\n        if (verificaFinanceiro()) {\r\n            if (cartao != null && cartao.verificaCartao()) {\r\n                return contas.find { Conta -> Conta.rContaCartao() == cartao }\r\n            }\r\n        }\r\n        return null\r\n    }\r\n    fun rConta(conta: Conta?): Conta? {\r\n        if (verificaFinanceiro()) {\r\n            if (conta?.idConta != null) {\r\n                return contas.find { Conta -> Conta.idConta == conta.idConta }\r\n            }\r\n        }\r\n        return null\r\n    }\r\n    fun rTransacao(cartaoTransacao: CartaoTransacao?): MutableList<Transacao>?{\r\n        if(verificaFinanceiro() && cartaoTransacao != null) {\r\n\r\n            val cartao = cartaoTransacao.cartao\r\n            val transacao = cartaoTransacao.transacao\r\n\r\n            if(cartao?.verificaCartao() != null){\r\n                val cartaoConta = rConta(cartao)?.rContaCartao()\r\n                if (cartaoConta?.verificaCartao() != null) {\r\n                    return cartaoConta.rTransacao(transacao)\r\n                }\r\n            }\r\n        }\r\n        return null\r\n    }\r\n    /*\r\n    *   UPDATE\r\n    * */\r\n    fun uConta(lista: Array<Conta>): String{\r\n        if (verificaFinanceiro() && lista.size == 2){\r\n\r\n            val busca = rConta(lista[0])\r\n            if (busca!=null){\r\n                busca.uConta(lista[1])\r\n                return \"SUCESSO\"\r\n            }\r\n        }\r\n        return \"FRACASSO\"\r\n    }\r\n    fun uPessoa(conta: Conta?): String {\r\n        if(verificaFinanceiro() && conta != null) {\r\n            val busca = rConta(conta)\r\n            if (busca != null)\r\n            {\r\n                val buscaCliente = busca.rContaPessoa()\r\n                buscaCliente?.uPessoa(conta.rContaPessoa())\r\n                return \"SUCESSO\"\r\n            }\r\n        }\r\n        return \"FRACASSO\"\r\n    }\r\n    fun uCartao(conta: Conta?): String{\r\n        if (verificaFinanceiro() && conta != null) {\r\n            var busca = rConta(conta)\r\n            if (busca != null) {\r\n                val cartao = conta.rContaCartao()\r\n                val cartaoConta = busca.rContaCartao()\r\n                cartaoConta?.uCartao(cartao)\r\n                return \"SUCESSO\"\r\n            } else {\r\n                busca = rConta(conta.rContaPessoa())\r\n                if (busca != null) {\r\n                    val cartao = conta.rContaCartao()\r\n                    val cartaoConta = busca.rContaCartao()\r\n                    cartaoConta?.uCartao(cartao)\r\n                    return \"SUCESSO\"\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n        return \"FRACASSO\"\r\n    }\r\n    fun uTransacao(cartaoTransacao: CartaoTransacao?): String{\r\n\r\n        if(verificaFinanceiro() && cartaoTransacao!=null) {\r\n            val cartao = cartaoTransacao.cartao\r\n            val transacao = cartaoTransacao.transacao\r\n            if(cartao != null && cartao.verificaCartao() && transacao != null){\r\n                val conta = rConta(cartao)\r\n                if (conta != null){\r\n                    val buscaTransacao = conta.rContaCartao()?.rTransacao(transacao)\r\n                        if (buscaTransacao?.isNotEmpty() != null){\r\n                            buscaTransacao[0].uTransacao(transacao)\r\n                            return \"SUCESSO\"\r\n                        }\r\n                }\r\n            }\r\n        }\r\n        return \"FRACASSO\"\r\n    }\r\n    /*\r\n    *   DELETE\r\n    * */\r\n    fun dConta(conta: Conta?):String{\r\n        if (verificaFinanceiro() && conta?.idConta != null) {\r\n            val busca = rConta(conta)\r\n            if (busca!=null){\r\n                contas.remove(busca)\r\n                return \"SUCESSO\"\r\n            }\r\n        }\r\n        return \"FRACASSO\"\r\n    }\r\n    fun dTransacao(cartaoTransacao: CartaoTransacao?): String{\r\n        if (verificaFinanceiro() && cartaoTransacao !=null){\r\n            val cartao = cartaoTransacao.cartao\r\n            val transacao = cartaoTransacao.transacao\r\n            if (cartao?.verificaCartao() != null){\r\n                val busca = rConta(cartao)?.rContaCartao()\r\n                if (busca?.verificaCartao() !=null){\r\n\r\n                    return busca.dTransacao(transacao)\r\n                }\r\n\r\n            }\r\n        }\r\n        return \"FRACASSO\"\r\n    }\r\n    private fun verificaFinanceiro(): Boolean {\r\n        return contas.isNotEmpty()\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/kotlin/br/com/empresa/financeiro/Financeiro.kt	(revision 342e7f7b4c190e8643d1b0e2c5353474f5d760a3)
+++ src/main/kotlin/br/com/empresa/financeiro/Financeiro.kt	(date 1601949135823)
@@ -70,6 +70,7 @@
         }
         return null
     }
+
     fun rConta(cartao: Cartao?): Conta? {
         if (verificaFinanceiro()) {
             if (cartao != null && cartao.verificaCartao()) {
